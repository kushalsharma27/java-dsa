//public static int average(int a ,int b, int c) {
		//return (a+b+c)/3;
	
	
	/*public static int count(String s) {
		int Count = 0;
		for (int i=0;i<s.length();i++) {
			
			char ch = s.charAt(i);
			if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
				Count++;
			}
		}
		return Count;
	}*/
	
	// Method for print Array
	
	 static void printArray(int[] arr){
		for(int i=0;i<arr.length;i++) {
			System.out.println(arr[i]);
		}
	}
	
	 //  Method For count the number of occurences of number
	 
	 static int countOccurrences(int arr[], int x) {
		int count=0;
		for(int i=0;i<arr.length;i++) {
			if (arr[i] == x) {
				count++;
			}
		}
		return count;
	}
	 
	 // Method to find the index of last occurence of number
	 
	static int lastOccurrence(int [] arr, int x) {
		int index = -1;
		for(int i=0;i<arr.length;i++) {
			if(arr[i] == x) {
				index = i;
			}
		}
		return index;
	}
	
	// Method to find greater number
	
	static int countGreater(int[] arr, int x) {
		int count =0;
		for(int i=0;i<arr.length;i++) {
			if (arr[i]>x) {
				count++;
			}
		}
		return count;
	}
	
	// Method to check the Array is sorted or not
	
	static boolean isSorted(int[] arr) {
	   boolean check = true;	
		for(int i=1;i<arr.length;i++) {
			if(arr[i]<arr[i-1]) {
				check = false;
			}
		}
		return check;
	}
	
	// Method to sort and find the smallest and largest element
	
	static int[] smallestandlargest(int[] arr) {
		Arrays.sort(arr);
		int[] ans = {arr[0],arr[arr.length-1]};
		return ans;
	}
	
	// Method to find the pair of element for target sum
	
	static int pairSum(int[] arr, int target) {
		int n = arr.length;
		int ans = 0;
		for (int i=0;i<n;i++) {
			for(int j=i+1;j<n;j++) {
				for(int k=j+1;k<n;k++) {
					if(arr[i] + arr[j] + arr[k] == target) {
						ans++;
					}
				}
			}
		}
		return ans;
	}
	
	// Method to find unique element if other elements are in pair
	
	static int uniqueElement(int[] arr) {
		int n = arr.length;
		for(int i=0;i<n;i++) {
	       for(int j=i+1;j<n;j++) {
	    	   if(arr[i] == arr[j]) {
	    		   arr[i]=-1;
	    		   arr[j]=-1;
	    	   }
	       }
}
		int ans=0;
		for(int i=0;i<n;i++) {
			
			if(arr[i]>0) {
				ans=arr[i];
			}
		}
		return ans;
	}
	
	// Method to find maximum Element
	
	static int findmaximum(int[] arr) {
		int mx = Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++) {
			if(arr[i]>mx) {
				mx=arr[i];
			}
		}
		return mx;
	}
	
	// Method to find Second maximum element
	
	static int findsecondmaximum(int[] arr) {
		int mx = findmaximum(arr);
		
		for (int i=0;i<arr.length;i++) {
			if(arr[i] == mx) {
				arr[i] = Integer.MIN_VALUE;
			}
		}
		int secondmax=findmaximum(arr);
		return secondmax;
	}
	
	// Method to find first repeated element 
	
	static int repeatElement(int[] arr) {
		int ans  = -1;
		for (int i=0;i<arr.length;i++) {
			for(int j=i+1;j<arr.length;j++) {
				if(arr[i] == arr[j]) {
					ans = arr[i];
				}
			}
		}
		return ans;
	}
	
	
	
	static void swapArray(int[] arr,int i,int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
		
	}
	
	static void ReverseArray(int[] arr) {
		 int i=0,j=arr.length-1;
	       while(i<j) {
	    	   swapArray(arr,i,j);
	    	   i++;
	    	   j--;
	       }
	}
